{"version":3,"sources":["serviceWorker.js","SelectApi/SelectApi.js","RedocPage/RedocPage.js","AppFooter/AppFooter.js","SelectApiPage/SelectApiPage.js","index.js","logo.png"],"names":["Boolean","window","location","hostname","match","SelectApi","props","state","availableApis","_env_","URLS","map","item","value","slugify","name","toLowerCase","label","url","className","autoFocus","this","onChange","options","noOptionsMessage","placeholder","theme","colors","primary","THEME_COLOR","Component","RedocPage","handleChange","selectedApi","setState","activeApi","history","push","activeApiFromQuery","find","element","params","api","to","src","Logo","alt","specUrl","nativeScrollbars","scrollYOffset","main","AppFooter","href","SelectApiPage","ReactDOM","render","basename","BASE_NAME","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"uPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sGCiBSC,E,kDA9Bb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,cAAeP,OAAOQ,MAAMC,KAAKC,KAAI,SAAAC,GAAI,MAAK,CAAEC,MAAOC,IAAQF,EAAKG,MAAMC,cAAeC,MAAOL,EAAKG,KAAMG,IAAKN,EAAKM,SAJtG,E,0CAQnB,WACE,OACI,kBAAC,IAAD,CACIC,UAAU,cACVC,UAAWC,KAAKf,MAAMc,UACtBP,MAAOQ,KAAKf,MAAMO,MAClBS,SAAUD,KAAKf,MAAMgB,SACrBC,QAASF,KAAKd,MAAMC,cACpBgB,iBAAkB,iBAAM,gBACxBC,YAAa,gBACbC,MAAO,SAACA,GAAD,mBAAC,eACHA,GADE,IAELC,OAAO,2BACJD,EAAMC,QADH,IAEJC,QAAS3B,OAAOQ,MAAMoB,uB,GAvBdC,aC6DTC,E,kDAxDb,WAAYzB,GAAQ,IAAD,uBACjB,cAAMA,IAkBR0B,aAAe,SAAAC,GACb,EAAKC,SAAS,CACZC,UAAWF,IAGb,EAAK3B,MAAM8B,QAAQC,KAAKJ,EAAYpB,QArBpC,EAAKN,MAAQ,CACXC,cAAeP,OAAOQ,MAAMC,KAAKC,KAAI,SAAAC,GAAI,MAAK,CAAEC,MAAOC,IAAQF,EAAKG,MAAMC,cAAeC,MAAOL,EAAKG,KAAMG,IAAKN,EAAKM,QACrHiB,UAAW,CACTjB,IAAK,KAIT,IAAMoB,EAAqB,EAAK/B,MAAMC,cAAc+B,MAAK,SAAAC,GAAO,OAAIA,EAAQ3B,QAAU,EAAKP,MAAMF,MAAMqC,OAAOC,OAV7F,OAYbJ,EACF,EAAK/B,MAAM4B,UAAYG,EAEvB,EAAKhC,MAAM8B,QAAQC,KAAK,KAfT,E,0CA2BnB,WACE,OACE,6BACE,4BAAQlB,UAAU,oBAChB,kBAAC,IAAD,CAAMwB,GAAI,KACR,yBAAKC,IAAKC,IAAMC,IAAI,WAGtB,kBAAC,EAAD,CACE3B,UAAU,SACVN,MAAOQ,KAAKd,MAAM4B,UAClBb,SAAUD,KAAKW,gBAGnB,6BAASb,UAAU,oBACjB,kBAAC,kBAAD,CACE4B,QAAS1B,KAAKd,MAAM4B,UAAUjB,IAC9BK,QAAS,CACPyB,kBAAkB,EAClBC,cAAe,GACfvB,MAAO,CAAEC,OAAQ,CAAEC,QAAS,CAAEsB,KAAMjD,OAAOQ,MAAMoB,wB,GAhDvCC,aCKTqB,G,0KATb,WACE,OACE,gCACI,uBAAGhC,UAAU,YAAYiC,KAAK,2CAA9B,4B,GAJctB,cC2BTuB,E,4MAtBbrB,aAAe,SAAAC,GACb,EAAK3B,MAAM8B,QAAQC,KAAKJ,EAAYpB,Q,4CAGtC,WACE,OACE,6BACE,yBAAKM,UAAU,kBACb,6BACE,yBAAKyB,IAAKC,IAAMC,IAAI,UACpB,kBAAC,EAAD,CACE1B,UAAU,OACVE,SAAUD,KAAKW,iBAIrB,kBAAC,EAAD,W,GAlBoBF,aCG5BwB,IAASC,OACP,kBAAC,IAAD,CAAQC,SAAUvD,OAAOQ,MAAMgD,WAC7B,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAOM,KAAK,QAAQC,UAAW7B,IAC/B,kBAAC,EAAD,QAGH8B,SAASC,eAAe,SLgHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBMnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.77917b89.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport slugify from 'slugify';\n\nclass SelectApi extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      availableApis: window._env_.URLS.map(item => ({ value: slugify(item.name).toLowerCase(), label: item.name, url: item.url })),\n    }\n  }\n\n  render() {\n    return (\n        <Select\n            className=\"select__api\"\n            autoFocus={this.props.autoFocus}\n            value={this.props.value}\n            onChange={this.props.onChange}\n            options={this.state.availableApis}\n            noOptionsMessage={() => 'No api found'}\n            placeholder={'Search Api...'}\n            theme={(theme) => ({\n              ...theme,\n              colors: {\n              ...theme.colors,\n                primary: window._env_.THEME_COLOR,\n              },\n            })}\n          />\n    );\n  }\n}\n\nexport default SelectApi;\n","import React, { Component } from 'react';\nimport './RedocPage.css';\nimport Logo from '../logo.png';\nimport { RedocStandalone } from 'redoc';\nimport slugify from 'slugify';\nimport { Link } from 'react-router-dom'\nimport SelectApi from '../SelectApi/SelectApi';\n\nclass RedocPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      availableApis: window._env_.URLS.map(item => ({ value: slugify(item.name).toLowerCase(), label: item.name, url: item.url })),\n      activeApi: {\n        url: ''\n      }\n    }\n    \n    const activeApiFromQuery = this.state.availableApis.find(element => element.value === this.props.match.params.api);\n\n    if (activeApiFromQuery) {\n      this.state.activeApi = activeApiFromQuery\n    } else {\n      this.props.history.push('/');\n    }\n  }\n\n  handleChange = selectedApi => {\n    this.setState({\n      activeApi: selectedApi\n    })\n\n    this.props.history.push(selectedApi.value);\n  };\n\n  render() {\n    return (\n      <div>\n        <header className=\"RedocPage-header\">\n          <Link to={'/'}> \n            <img src={Logo} alt=\"Redoc\" />\n          </Link>\n\n          <SelectApi\n            className=\"select\"\n            value={this.state.activeApi}\n            onChange={this.handleChange}\n          />\n        </header>\n        <section className=\"container__redoc\">\n          <RedocStandalone\n            specUrl={this.state.activeApi.url}\n            options={{\n              nativeScrollbars: true,\n              scrollYOffset: 60,\n              theme: { colors: { primary: { main: window._env_.THEME_COLOR } } },\n            }}\n          />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default RedocPage;\n","import React, { Component } from 'react';\nimport './AppFooter.css';\n\nclass AppFooter extends Component {\n  render() {\n    return (\n      <footer>\n          <a className=\"copyright\" href=\"https://hub.docker.com/r/volbrene/redoc\">created by volbrene</a>\n      </footer>\n    );\n  }\n}\n\nexport default AppFooter;\n","import React, { Component } from 'react';\nimport './SelectApiPage.css';\nimport Logo from '../logo.png';\nimport AppFooter from '../AppFooter/AppFooter';\nimport SelectApi from '../SelectApi/SelectApi';\n\nclass SelectApiPage extends Component {\n\n  handleChange = selectedApi => {\n    this.props.history.push(selectedApi.value);\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"search-wrapper\">\n          <div>\n            <img src={Logo} alt=\"Redoc\" />\n            <SelectApi\n              autoFocus=\"true\"\n              onChange={this.handleChange}\n            />\n          </div>\n        </div>\n        <AppFooter/>\n      </div>\n    );\n  }\n}\n\nexport default SelectApiPage;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport RedocPage from './RedocPage/RedocPage';\nimport SelectApiPage from './SelectApiPage/SelectApiPage';\nimport AppFooter from './AppFooter/AppFooter';\n\nReactDOM.render((\n  <Router basename={window._env_.BASE_NAME}>\n    <div>\n      <Route exact path=\"/\" component={SelectApiPage} />\n      <Route path=\"/:api\" component={RedocPage} />\n      <AppFooter/>\n    </div>\n  </Router>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.a247d02f.png\";"],"sourceRoot":""}